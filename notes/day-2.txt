dynamic polymorphism
----------------------------------

class A
{
	protected int x;
	public A(){}
	public A(int val){x=val;}
	public string print()
	{
		//print the value of x
		//system.out.println(x);
		return x;
	}
}
class D extends A {}
class B extends A
{
	int y;
	public B(){}
	public B(int val1, int val2)
	{
		super(val1);
		y = val2;
	}
	@override
	public string print()
	{
		//print the value of x and y
		return super.print()+""+y;
		//system.out.println(x+" "+y);
	}
} 
class C extends A
{
	int z;
	public C(){}
	public C(int val1, int val2)
	{
		super(val1);
		z = val2;
	}
	@override
	public string print()
	{
		//print the value of x and z
		//system.out.println(x+" "+z);
		return super.print()+""+z;
	}
} 
class app{

	main(){
	//upcasting
		A obj = new B();
		obj.print();
		int a = 10;

		calculation calc = new calculation();
		calc.add(12,13);
	}
}

class calculation
{
	add(int x, int y){}
	add(int x, int y, int z){}
	add(int x, int y, float z){}
	add(int x, float y, int z){}
}


interface
solid principle


		animal -> makeSound()
-----------------------------------------------------------
cat		dog		bird	.....
makeSound()	makeSound()	makeSound()
{}		{}		{}

abstract class: a class containing at least a single abstract method is an abstract class
file
database

	[pure abstract class] logger => void log();
--------------------------------------------------------------
filelogger => @override void log() {}
dblogger   => @override void log() {}

class person 
{
	string name;	
	public person(){}
	public person(string n){name=n;}
	public bool isOutstanding();
	public string print(){ return name;}
}
person p = new person();
//p.isOutstanding();
class student extends person
{
	float marks;
	public student(){}
	public student(string n, float m){ super(n); marks=m;}
        public bool isOutstanding() { if(marks>85) return true; else return false;}	
	public string print()
	{
		return super.print()+""+marks;
	}
}
class professor	extends person
{
	int booksPublished;
	public bool isOutstanding() { if(booksPublished>5) return true; else return false;}
	public string print(){ return super.print()+""+booksPublished;}
}

dynamic polymorphism
	a. base method is NOT abstract, it is not mandatory for child to re-implement
	b. base method is abstract, its is now MANDATORY for child to re-implement

abstract class=>
	is to be used as a template for other classes with common data and functionalities, where some of the functionalities are abstract because the implementation completely relies on the child/derived class
	abstract class can contain non-abstract members also
	abstract class idea forces child classes to mandatroily implement some of the required methods
side-effect:
	abstract class's object can't be created

pure abstract class: an abstract class, where everything is abstract (no non-abstract member can be there) - interface
	interface is collection of just abstrat members 
	multiple interfaces can be implemented in a single class
	interface provides loose coupling
	interface gateway to the class
	interface acts as a contract for the classes who implement it
side-effect: 
	you can't create instance of an interface

			shape	=> float calculateArea();
circle			rectangle		triangle
--------------------------------------------------------------------------------
radius			length, width		base, height
float calculateArea()	float calculateArea()   float calculateArea()			

C => A, B, D, E

B => A

interface dataOperations
{
	void getData();
	void addData();
}
class DataAccess implements dataOperations
{
	public void getData(){}
	public void addData(){}
	.......................	
}

class areaCalculator{

	/*
	public float calculate(circle c){
		return c.calculateCircleArea();
	}
	public float calculate(triangle t){
		return t.calculateTriangleArea();
	}
	public float calculate(square s){
		return s.calculateTriangleArea();
	}
	public float calculate(rectangle r){
		return r.calculateTriangleArea();
	}
	*/
	public float calculate(shape s){
		return s.calculateCircleArea();
	}
}

interface areaConsolePrinter
{
	void printAreaInConsole();
}
interface areaTextPrinter
{	
	void printAreaInText(float area);
}
interface areaJsonPrinter
{
	void printAreaInJson(float area);
}
interface areaHTMLPrinter
{
	void printAreaInHTML(float area);
}
class shapeConsolePrinter implements areaConsolePrinter
{
}

class shapeTextPrinter implements areaJsonPrinter
{
	public void printAreaInText(float area){}
}
class shapeHTMLPrinter implements areaHTMLPrinter
{
	public void printAreaInHTML(float area){}
}

class shapeJsonPrinter extends shapeConsolePrinter implements areaTextPrinter
{
	public void printAreaInJson(float area){}
}
main(){
	shape c = null;
	c = new circle();

	shape t = null;
	t = new triangle();		

	shape s = null;
	s = new square();

	shape r = null;
	r = new rectangle();

	int x = 10;

	areaCalculator ac = new areaCalculator();
	float cArea = 	ac.calculate(c);
	float tArea = 	ac.calculate(t);
	float sArea = 	ac.calculate(s);
	float rArea = 	ac.calculate(r);
	areaPrinter ap = new areaPrinter();
	ap.printAreaInText(cArea);
	//ap.printAreaInJson(tArea);
	//ap.printAreaInHTML(sArea);
}
shape => float calculateArea();
circle->shape =>float calculateArea(){}
triangle->shape=>float calculateArea(){}
square->shape=>float calculateArea(){}
rectangle->shape=>float calculateArea(){}

S:single responsibility ("S"olid)
O:open-closed: open for extension, closed for change (s"O"lid)
L: Liskov Substituion principle=>every sub/child/derived class should be substitutable for their base or parent class
I:interface segregation principle (sol"I"d)
D: dependency inversion principle=> entities /objects should depend on abstractions, not on concretions


interface Shape
{
	float calculateArea();	
}
class Circle implements Shape
{
	float _radius;
	public Circle(){}
	public Circle(float radius)
	{
		_radius = radius;
	}
	public float calculateArea()
	{
		return _radius*_radius*3.14;
	}	
}

class Square implements Shape
{
	float _length;
	public Square(){}
	public Square(float length)
	{
		_length = length;
	}
	public float calculateArea()
	{
		return _length*_length;
	}	
}
class Rectangle implements Shape
{
	float _length;
	float _width;

	public rectangle(){}
	public rectangle(float l, float w){ _length = l; _width = w;}		
	public float calculateArea()
	{
		return _length*_width;
	}	
}
class AreaCalculator
{
	private Shape _shapes[];
	private float area[];
	public AreaCalculator(){}
	public AreaCalculator(Shape shapes[])
	{
		_shapes = shapes;
	}

	public void calculate()
	{
		for(int i =0;i<_shapes.getLength();i++)
		{
			Shape s = _shapes[i];
			_area[i]= s.calculateArea();
			/*
			if(s is of type Square)
			{
				area[i]=s._length*s._length;				
			}
			if(s is of type Circle)
			{
				area[i]=s._radius*s._radius*3.14;				
			}		
			if(s is of type Rectangle)
			{
				area[i]=s._radius*s._radius*3.14;				
			}*/
		}
	}	
}
class volumeCalculator extends AreaCalculator
{
	public volumeCalculator(){}
	public volumeCalculator(Shape shapes[]){ super(shapes);}
	@override
	public void calculate()
	{
		//logic to calculate volume of every shape
	}
}
class areaPrinter
{
	AreaCalculator _ac;
	public areaPrinter(AreaCalculator ac)
	{
		_ac = ac;
		_ac.calculate();
	}
	public void printAreaInText()
	{
		for(int i =0;i<_ac._area.getLength();i++)	
		{
			print the areas of different shapes
			system.out.println(_ac._area[i]);
		}
	}
	public void printAreaInJson()
	{
		for(int i =0;i<_ac._area.getLength();i++)	
		{
			print the areas of different shapes
			system.out.println(json_encode(_ac._area[i]));
		}
	}
	public void printAreaInHTML()
	{
		for(int i =0;i<_ac._area.getLength();i++)	
		{
			print the areas of different shapes
			system.out.println(_ac._area[i]);
		}
	}
}
main(){
	Circle c = new Circle(12);
	Square s = new Square(23);
	Rectangle r = new Rectangle(12,13);
	//create object of AC and pass an array of type Shape
	Shape shapes[] = new Shape[]{c,s,r};

	AreaCalculator ac = new AreaCalculator(shapes);
	volumeCalculator vc = new volumeCalculator(shapes);

	areaPrinter printer = new areaPrinter(ac);
	printer.printArea();
	areaPrinter volumePrinter = new areaPrinter(vc);
	printer.printArea();
}

1. change in the name of the entity
2. changed the architecture
3. object not created

interface DataAccess
{
	public string getData();
	public bool addData(string data);
	................................
}
//depndency factor
class MySqlDataAccess implements DataAccess
{
	public SqlDataAccess()
	{
	}
	public string getData(){ //code}
	public bool addData(string data){ //code}	
	................................
}
//depndency factor
class OracleDataAccess implements DataAccess
{
	public string getData(){ //code}
	public bool addData(string data){ //code}	
	................................
}
class SqlServerDataAccess implements DataAccess
{
	public string getData(){ //code}
	public bool addData(string data){ //code}	
	................................
}
//dependent class
class UserInterface
{
	DataAccess dbAccess;
	public UserInterface(DataAcces _dataAccess)
	{
		dbAccess = _dataAccess;
	}		
	public void ShowData()
	{
		string data = dbAccess.getData();
		system.out.println(data);
	}	
	public void InsertData()
	{
		bool res = dbAccess.addData("joydip");
		print res
	}
}
main(){
//print a menu to the user
//1. Oracle
//2. My Sql
//3. sql server

//ask for choice
//if user enters 1, create instance of OracleDataAccess
//if user enters 2, create instance of MySqlDataAccess
//if user enters 2, create instance of SqlServerDataAccess
int choice=2;
DataAccess da;
switch(choice)
{
	case 1:
		da = new OracleDataAccess();		
		break;

	case 2:
		da = new MySqlDataAccess();
		break;

	case 3:
		da = new SqlServerDataAccess();
		break;
}

UserInterface ui = new UserInterface(da);
ui.ShowData();
}